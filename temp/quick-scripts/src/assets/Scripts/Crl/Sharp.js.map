{"version":3,"sources":["assets\\Scripts\\Crl\\Sharp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAqC;AAErC,+CAA0C;AAEpC,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAA0B,CAAC;AAG5C;IAAmC,yBAAY;IAD/C;QAAA,qEA2CC;QAxCG,eAAS,GAAY,IAAI,CAAA;QAEzB,eAAS,GAAW,CAAC,CAAA;QAGrB,gBAAU,GAAW,CAAC,CAAA;;IAmC1B,CAAC;IAjCG,sBAAM,GAAN;QACI,IAAI,CAAC,SAAS,GAAG,mBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;IACrE,CAAC;IAED,qBAAK,GAAL;IAEA,CAAC;IAED,2BAAW,GAAX,UAAY,KAAa;QAAzB,iBAYC;QAXG,OAAO,IAAI,OAAO,CAAC,UAAC,EAAE,EAAE,EAAE;YACtB,IAAI,MAAM,GAAG,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAA;YACzD,IAAI,GAAG,GAAG,iBAAO,CAAC,WAAW,CAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAI,CAAC,IAAI,CAAC,CAAA;YACxE,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAA,oBAAoB,EAAE,MAAM,CAAC,CAAA;YACzD,IAAI,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC;gBACjB,KAAI,CAAC,UAAU,GAAG,KAAK,CAAA;gBACvB,EAAE,EAAE,CAAA;YACR,CAAC,CAAC,CAAA;YACF,IAAI,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;YAC5B,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;IACN,CAAC;IAED,8BAAc,GAAd;QACI,IAAI,CAAC,mBAAS,CAAC,KAAK,CAAC,UAAU,EAAE;YAC7B,IAAI,iBAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,mBAAS,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE;gBAClE,mBAAS,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA;aAC3B;SACJ;IACL,CAAC;IAED,sBAAM,GAAN,UAAO,EAAE;QACL,IAAI,CAAC,cAAc,EAAE,CAAA;IACzB,CAAC;IAlCD;QADC,QAAQ;6CACa;IAPL,KAAK;QADzB,OAAO;OACa,KAAK,CA0CzB;IAAD,YAAC;CA1CD,AA0CC,CA1CkC,EAAE,CAAC,SAAS,GA0C9C;kBA1CoB,KAAK","file":"","sourceRoot":"/","sourcesContent":["import Utility from \"../Mod/Utility\";\r\nimport Level1 from \"./Level/Level1\";\r\nimport LevelBase from \"./Level/LevelBase\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Sharp extends cc.Component {\r\n\r\n    pointNode: cc.Node = null\r\n\r\n    moveSpeed: number = 1\r\n\r\n    @property\r\n    pointIndex: number = 0\r\n\r\n    onLoad() {\r\n        this.pointNode = LevelBase.Share.node.getChildByName('PointNode')\r\n    }\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    moveToPoint(index: number) {\r\n        return new Promise((rs, rj) => {\r\n            let desPos = this.pointNode.children[index].getPosition()\r\n            let dis = Utility.getWorldDis(this.pointNode.children[index], this.node)\r\n            let a1 = cc.moveTo(dis / 300/* this.moveSpeed */, desPos)\r\n            let a2 = cc.callFunc(() => {\r\n                this.pointIndex = index\r\n                rs()\r\n            })\r\n            let a3 = cc.sequence(a1, a2)\r\n            this.node.runAction(a3)\r\n        })\r\n    }\r\n\r\n    checkEatPlayer() {\r\n        if (!LevelBase.Share.isGameOver) {\r\n            if (Utility.getWorldDis(this.node, LevelBase.Share.playerNode) <= 50) {\r\n                LevelBase.Share.loseCB()\r\n            }\r\n        }\r\n    }\r\n\r\n    update(dt) {\r\n        this.checkEatPlayer()\r\n    }\r\n}\r\n"]}