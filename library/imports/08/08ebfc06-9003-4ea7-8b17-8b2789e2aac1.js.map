{"version":3,"sources":["assets\\Scripts\\Mod\\Utility.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Utility {\r\n\r\n    public static loadSpriteFrame(spName: string, sprite: cc.Sprite, cb?: Function) {\r\n        //加载SpriteAtlas(图集)，并获取其中一张图片\r\n        cc.loader.loadRes(spName, cc.SpriteFrame, function (err, spriteFrame) {\r\n            sprite.spriteFrame = spriteFrame\r\n            cb && cb()\r\n        })\r\n    }\r\n\r\n    public static loadSpAtlas(atlasName: string, spfName: string, sprite: cc.Sprite) {\r\n        //加载SpriteAtlas(图集)，并获取其中一张图片\r\n        cc.loader.loadRes(atlasName, cc.SpriteAtlas, function (err, atlas) {\r\n            sprite.spriteFrame = atlas.getSpriteFrame(spfName);\r\n        })\r\n    }\r\n\r\n    //打乱数组\r\n    public static shuffleArr(arr: any[]) {\r\n        let i = arr.length;\r\n        while (i) {\r\n            let j = Math.floor(Math.random() * i--);\r\n            [arr[j], arr[i]] = [arr[i], arr[j]];\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    //数字前补0\r\n    public static joinZero(length: number, num: number) {\r\n        return (Array(length).join('0') + num).slice(-length);\r\n    }\r\n\r\n    public static getWorldPos(node: cc.Node, point: cc.Vec2 = cc.v2(0, 0)): cc.Vec2 {\r\n        return node.convertToWorldSpaceAR(point)\r\n    }\r\n\r\n    public static getWorldDis(node1: cc.Node, node2: cc.Node) {\r\n        let p1: cc.Vec2 = this.getWorldPos(node1)\r\n        let p2: cc.Vec2 = this.getWorldPos(node2)\r\n        return (p1.sub(p2)).mag()\r\n    }\r\n\r\n    public static getWorldDir(from: cc.Node, to: cc.Node): cc.Vec2 {\r\n        let p1: cc.Vec2 = this.getWorldPos(from)\r\n        let p2: cc.Vec2 = this.getWorldPos(to)\r\n        let dir = p2.sub(p1).normalizeSelf()\r\n        return dir\r\n    }\r\n\r\n    public static delayActive(node: cc.Node, duration: number, target) {\r\n        node.active = false\r\n        target.scheduleOnce(() => { node.active = true }, duration)\r\n    }\r\n\r\n    public static getRandomItemInArr(arr: any[]): any {\r\n        return arr[Math.floor(Math.random() * arr.length)]\r\n    }\r\n\r\n    public static getRandomItemInArrWithoutSelf(self: any, arr: any[], count: number = 1) {\r\n        let temp: any = [].concat(arr)\r\n        temp.splice(temp.indexOf(self), 1)\r\n        temp = this.shuffleArr(temp)\r\n        return temp.slice(0, count)\r\n    }\r\n\r\n    public static rotateLoop(node: cc.Node, duration: number, rate: number) {\r\n        let a1 = cc.rotateBy(duration, -rate)\r\n        let a2 = cc.rotateBy(duration * 2, rate * 2)\r\n        let a3 = cc.rotateBy(duration, -rate)\r\n        let a4 = cc.sequence(a1, a2, a3)\r\n        node.stopAllActions()\r\n        node.runAction(cc.repeatForever(a4))\r\n    }\r\n\r\n    public static GetRandom(mix, max, isInt = true) {\r\n        let w = max - mix\r\n        let r1 = Math.random() * w\r\n        r1 += mix\r\n        return isInt ? Math.floor(r1) : r1\r\n    }\r\n\r\n    public static checkInsection(pNode: cc.Node, rNode: cc.Node) {\r\n        let p1 = this.getWorldPos(pNode)\r\n        let rPos = this.getWorldPos(rNode)\r\n        let x1 = rPos.x - rNode.width / 2\r\n        let x2 = rPos.x + rNode.width / 2\r\n        let y1 = rPos.y - rNode.height / 2\r\n        let y2 = rPos.y + rNode.height / 2\r\n        return p1.x >= x1 && p1.x <= x2 && p1.y >= y1 && p1.y <= y2\r\n    }\r\n}\r\n"]}